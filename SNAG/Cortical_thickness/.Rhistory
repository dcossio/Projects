theme(legend.position = "top", legend.title=element_blank())
# Chunk 109
# Use hp data frame adjusted
ggscatter(young_HP_df_adj, x = "Right-Hippocampus", y = "loop_pe_rad3_m",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "spearman",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "Position Error at aver3.0  (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Chunk 110
# Use hp data frame adjusted
ggscatter(young_HP_df_adj, x = "Right-Hippocampus", y = "loop_ae_avg_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "spearman",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "Angular Error at average (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Chunk 111
# Use hp data frame adjusted
ggscatter(young_HP_df_adj, x = "Right-Hippocampus", y = "loop_ae_rad3_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "spearman",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "Angular Error at aver3.0  (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Chunk 112
# Use hp data frame adjusted
ggscatter(young_HP_df_adj, x = "Right-Hippocampus", y = "loop_de_avg_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "pearson",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "Degrees Traveled at average (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Chunk 113
# Use hp data frame adjusted
ggscatter(young_HP_df_adj, x = "Right-Hippocampus", y = "loop_de_rad3_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "pearson",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "Degrees Traveled at aver3.0  (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Chunk 114
# Use hp data frame adjusted
ggscatter(young_HP_df_adj, x = "Left-Hippocampus", y = "loop_pe_avg_m",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "spearman",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "Position Error at average (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Chunk 115
# Use hp data frame adjusted
ggscatter(young_HP_df_adj, x = "Left-Hippocampus", y = "loop_pe_rad3_m",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "spearman",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "Position Error at aver3.0  (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Chunk 116
# Use hp data frame adjusted
ggscatter(young_HP_df_adj, x = "Left-Hippocampus", y = "loop_ae_avg_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "spearman",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "Angular Error at average (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Chunk 117
# Use hp data frame adjusted
ggscatter(young_HP_df_adj, x = "Left-Hippocampus", y = "loop_ae_rad3_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "spearman",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "Angular Error at aver3.0  (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Chunk 118
# Use hp data frame adjusted
ggscatter(young_HP_df_adj, x = "Left-Hippocampus", y = "loop_de_avg_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "pearson",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "Degrees Traveled at average (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Chunk 119
# Use hp data frame adjusted
ggscatter(young_HP_df_adj, x = "Left-Hippocampus", y = "loop_de_rad3_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "pearson",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "Degrees Traveled at aver3.0  (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Chunk 120
# now there's a lot of columns to select here so I'm going to try and make a few list of them so then we can grab by names
# precentral, postcentral, superoir parietal, superior frontal, caudate and putamen
lh_apriori <- c("lh_postcentral_thickness","lh_precentral_thickness","lh_superiorparietal_thickness","lh_superiorfrontal_thickness", "lh_cuneus_thickness","lh_medialorbitofrontal_thickness","lh_entorhinal_thickness","lh_parahippocampal_thickness","lh_precuneus_thickness","lh_lateraloccipital_thickness","lh_posteriorcingulate_thickness")
rh_apriori <- c("rh_postcentral_thickness","rh_precentral_thickness","rh_superiorparietal_thickness","rh_superiorfrontal_thickness", "rh_cuneus_thickness","rh_medialorbitofrontal_thickness","rh_entorhinal_thickness","rh_parahippocampal_thickness","rh_precuneus_thickness","rh_lateraloccipital_thickness","rh_posteriorcingulate_thickness")
sub_apriori <- c("Left-Caudate","Right-Caudate","Left-Putamen","Right-Putamen","Left-Hippocampus","Right-Hippocampus")
avg_apriori <- c("avg_t1_hipp","avg_postcentral", "avg_precentral",
"avg_superior_parietal", "avg_superior_frontal", "avg_caudate", "avg_putamen")
all_apriori <- c(lh_apriori,rh_apriori,sub_apriori)
#creating dataframe with all apriori regions
midlife_CT_df <- midlife_raw_df %>%  dplyr::select(
"subject_id",
"sex",
"age_spatial_years",
"repo_status",
"loop_pe_rad3_m",
"loop_pe_avg_m",
"loop_de_rad3_degree",
"loop_de_avg_degree",
"loop_ae_rad3_degree",
"loop_ae_avg_degree",
"EstimatedTotalIntraCranialVol",
all_apriori
) %>% mutate(
avg_t1_hipp = (.$`Left-Hippocampus` + .$`Right-Hippocampus`) / 2,
avg_postcentral = lh_postcentral_thickness + rh_postcentral_thickness /
2,
avg_precentral = lh_precentral_thickness + rh_precentral_thickness / 2,
avg_superior_parietal = lh_superiorparietal_thickness + rh_superiorparietal_thickness / 2,
avg_superior_frontal = rh_superiorfrontal_thickness + lh_superiorfrontal_thickness / 2 , avg_caudate = `Left-Caudate` + `Right-Caudate` /2, avg_putamen = `Left-Putamen`,`Right-Putamen`
) %>% filter(EstimatedTotalIntraCranialVol != "NA")
View(midlife_CT_df)
midlife_CT_df_Avg <- midlife_CT_df %>% filter(loop_de_avg_degree != "NA")
cor_results <-
data.frame(matrix(nrow = 0, ncol = 7)) %>%   `colnames<-`(c("roi", "estimate", "p.value", "statistic", "n", "gp", "Method"))
View(midlife_CT_df_Avg)
pcorlist <- list()
for (ROI in avg_apriori) {
print(ROI)
if(!is.na(sum(midlife_CT_df_Avg[[ROI]])) == FALSE){
pcorlist[[ROI]] <- NA
}else{
pcorlist[[ROI]] <-
pcor.test(x = midlife_CT_df_Avg[["loop_de_avg_degree"]], y = midlife_CT_df_Avg[[ROI]], z = midlife_CT_df_Avg[, c("age_spatial_years","sex","EstimatedTotalIntraCranialVol")])
temp <- cbind(ROI, pcorlist[[ROI]])
cor_results <- rbind(cor_results, temp)
}
}
cor_results$adj.pval <- p.adjust(cor_results$p.value, method = "BY", n = length(cor_results$p.value))
cor_results <- arrange(cor_results,p.value)
pcor.test(x = midlife_CT_df_Avg[["loop_de_avg_degree"]], y = midlife_CT_df_Avg[[ROI]], z = midlife_CT_df_Avg[, c("age_spatial_years","sex","EstimatedTotalIntraCranialVol")])
class(midlife_CT_df_Avg[["loop_de_avg_degree"]])
View(midlife_CT_df_Avg)
class(midlife_CT_df_Avg[[ROI]])
class(midlife_CT_df_Avg$sex)
midlife_CT_df_Avg <- midlife_CT_df %>% filter(loop_de_avg_degree != "NA")
midlife_CT_df_Avg$sex[midlife_CT_df_Avg$sex=="Male"] <- 1
midlife_CT_df_Avg$sex[midlife_CT_df_Avg$sex=="Female"] <- 0
midlife_CT_df_Avg$sex <- as.numeric(midlife_CT_df_Avg$sex)
pcorlist[[ROI]] <-
pcor.test(x = midlife_CT_df_Avg[["loop_de_avg_degree"]], y = midlife_CT_df_Avg[[ROI]], z = midlife_CT_df_Avg[, c("age_spatial_years","sex","EstimatedTotalIntraCranialVol")])
View(pcorlist)
pcorlist[["avg_t1_hipp"]]
midlife_CT_df_Avg <- midlife_CT_df %>% filter(loop_de_avg_degree != "NA")
midlife_CT_df_Avg$sex[midlife_CT_df_Avg$sex=="Male"] <- 1
midlife_CT_df_Avg$sex[midlife_CT_df_Avg$sex=="Female"] <- 0
midlife_CT_df_Avg$sex <- as.numeric(midlife_CT_df_Avg$sex)
cor_results <-
data.frame(matrix(nrow = 0, ncol = 7)) %>%   `colnames<-`(c("roi", "estimate", "p.value", "statistic", "n", "gp", "Method"))
pcorlist <- list()
for (ROI in avg_apriori) {
print(ROI)
if(!is.na(sum(midlife_CT_df_Avg[[ROI]])) == FALSE){
pcorlist[[ROI]] <- NA
}else{
pcorlist[[ROI]] <-
pcor.test(x = midlife_CT_df_Avg[["loop_de_avg_degree"]], y = midlife_CT_df_Avg[[ROI]], z = midlife_CT_df_Avg[, c("age_spatial_years","sex","EstimatedTotalIntraCranialVol")], method = "spearman")
temp <- cbind(ROI, pcorlist[[ROI]])
cor_results <- rbind(cor_results, temp)
}
}
cor_results$adj.pval <- p.adjust(cor_results$p.value, method = "BY", n = length(cor_results$p.value))
cor_results <- arrange(cor_results,p.value)
View(cor_results)
midlife_CT_df_Avg <- midlife_CT_df %>% filter(loop_de_avg_degree != "NA")
midlife_CT_df_Avg$sex[midlife_CT_df_Avg$sex=="Male"] <- 1
midlife_CT_df_Avg$sex[midlife_CT_df_Avg$sex=="Female"] <- 0
midlife_CT_df_Avg$sex <- as.numeric(midlife_CT_df_Avg$sex)
cor_results <-
data.frame(matrix(nrow = 0, ncol = 7)) %>%   `colnames<-`(c("roi", "estimate", "p.value", "statistic", "n", "gp", "Method"))
pcorlist <- list()
for (ROI in all_apriori) {
print(ROI)
if(!is.na(sum(midlife_CT_df_Avg[[ROI]])) == FALSE){
pcorlist[[ROI]] <- NA
}else{
pcorlist[[ROI]] <-
pcor.test(x = midlife_CT_df_Avg[["loop_de_avg_degree"]], y = midlife_CT_df_Avg[[ROI]], z = midlife_CT_df_Avg[, c("age_spatial_years","sex","EstimatedTotalIntraCranialVol")], method = "spearman")
temp <- cbind(ROI, pcorlist[[ROI]])
cor_results <- rbind(cor_results, temp)
}
}
cor_results$adj.pval <- p.adjust(cor_results$p.value, method = "BY", n = length(cor_results$p.value))
cor_results <- arrange(cor_results,p.value)
View(cor_results)
midlife_CT_df_Avg <- midlife_CT_df %>% filter(loop_de_avg_degree != "NA")
midlife_CT_df_Avg$sex[midlife_CT_df_Avg$sex=="Male"] <- 1
midlife_CT_df_Avg$sex[midlife_CT_df_Avg$sex=="Female"] <- 0
midlife_CT_df_Avg$sex <- as.numeric(midlife_CT_df_Avg$sex)
cor_results <-
data.frame(matrix(nrow = 0, ncol = 7)) %>%   `colnames<-`(c("roi", "estimate", "p.value", "statistic", "n", "gp", "Method"))
pcorlist <- list()
for (ROI in all_apriori) {
print(ROI)
if(!is.na(sum(midlife_CT_df_Avg[[ROI]])) == FALSE){
pcorlist[[ROI]] <- NA
}else{
pcorlist[[ROI]] <-
pcor.test(x = midlife_CT_df_Avg[["loop_de_avg_degree"]], y = midlife_CT_df_Avg[[ROI]], z = midlife_CT_df_Avg[, c("age_spatial_years","sex","EstimatedTotalIntraCranialVol")], method = "spearman")
temp <- cbind(ROI, pcorlist[[ROI]])
cor_results <- rbind(cor_results, temp)
}
}
cor_results$adj.pval <- p.adjust(cor_results$p.value, method = "fdr", n = length(cor_results$p.value))
cor_results <- arrange(cor_results,p.value)
install.packages("q.value")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("qvalue")
cor_results$adj.pval <- qvalue::qvalue(cor_results$p.value)
cor_results <- arrange(cor_results,p.value)
cor_results <-
data.frame(matrix(nrow = 0, ncol = 7)) %>%   `colnames<-`(c("roi", "estimate", "p.value", "statistic", "n", "gp", "Method"))
pcorlist <- list()
for (ROI in all_apriori) {
print(ROI)
if(!is.na(sum(midlife_CT_df_Avg[[ROI]])) == FALSE){
pcorlist[[ROI]] <- NA
}else{
pcorlist[[ROI]] <-
pcor.test(x = midlife_CT_df_Avg[["loop_de_avg_degree"]], y = midlife_CT_df_Avg[[ROI]], z = midlife_CT_df_Avg[, c("age_spatial_years","sex","EstimatedTotalIntraCranialVol")], method = "spearman")
temp <- cbind(ROI, pcorlist[[ROI]])
cor_results <- rbind(cor_results, temp)
}
}
cor_results$adj.pval <- qvalue::qvalue(cor_results$p.value)
cor_results <- arrange(cor_results,p.value)
qvalue::qvalue(cor_results$p.value)
View(cor_results)
x <- qvalue::qvalue(cor_results$p.value)
View(x)
qvals <- qvalue::qvalue(cor_results$p.value)
cor_results$adj.pval <- qvals[["qvalues"]]
qvals <- qvalue::qvalue(cor_results$p.value)
cor_results$adj.pval <- qvals[["qvalues"]]
cor_results <- arrange(cor_results,p.value)
midlife_CT_df_rad3 <- midlife_CT_df %>% filter(loop_de_rad3_degree != "NA")
midlife_CT_df_rad3$sex[midlife_CT_df_rad3$sex=="Male"] <- 1
midlife_CT_df_rad3$sex[midlife_CT_df_rad3$sex=="Female"] <- 0
midlife_CT_df_rad3$sex <- as.numeric(midlife_CT_df_rad3$sex)
cor_results <-
data.frame(matrix(nrow = 0, ncol = 7)) %>%   `colnames<-`(c("roi", "estimate", "p.value", "statistic", "n", "gp", "Method"))
pcorlist <- list()
for (ROI in all_apriori) {
print(ROI)
if(!is.na(sum(midlife_CT_df_rad3[[ROI]])) == FALSE){
pcorlist[[ROI]] <- NA
}else{
pcorlist[[ROI]] <-
pcor.test(x = midlife_CT_df_rad3[["loop_de_rad3_degree"]], y = midlife_CT_df_rad3[[ROI]], z = midlife_CT_df_rad3[, c("age_spatial_years","sex","EstimatedTotalIntraCranialVol")], method = "spearman")
temp <- cbind(ROI, pcorlist[[ROI]])
cor_results <- rbind(cor_results, temp)
}
}
# cor_results$adj.pval <- p.adjust(cor_results$p.value, method = "fdr", n = length(cor_results$p.value))
# cor_results <- arrange(cor_results,p.value)
qvals <- qvalue::qvalue(cor_results$p.value)
cor_results$adj.pval <- qvals[["qvalues"]]
cor_results <- arrange(cor_results,p.value)
View(cor_results)
midlife_CT_df_rad3 <- midlife_CT_df %>% filter(loop_de_rad3_degree != "NA")
midlife_CT_df_rad3$sex[midlife_CT_df_rad3$sex=="Male"] <- 1
midlife_CT_df_rad3$sex[midlife_CT_df_rad3$sex=="Female"] <- 0
midlife_CT_df_rad3$sex <- as.numeric(midlife_CT_df_rad3$sex)
cor_results <-
data.frame(matrix(nrow = 0, ncol = 7)) %>%   `colnames<-`(c("roi", "estimate", "p.value", "statistic", "n", "gp", "Method"))
pcorlist <- list()
for (ROI in avg_apriori) {
print(ROI)
if(!is.na(sum(midlife_CT_df_rad3[[ROI]])) == FALSE){
pcorlist[[ROI]] <- NA
}else{
pcorlist[[ROI]] <-
pcor.test(x = midlife_CT_df_rad3[["loop_de_rad3_degree"]], y = midlife_CT_df_rad3[[ROI]], z = midlife_CT_df_rad3[, c("age_spatial_years","sex","EstimatedTotalIntraCranialVol")], method = "spearman")
temp <- cbind(ROI, pcorlist[[ROI]])
cor_results <- rbind(cor_results, temp)
}
}
# cor_results$adj.pval <- p.adjust(cor_results$p.value, method = "fdr", n = length(cor_results$p.value))
# cor_results <- arrange(cor_results,p.value)
View(cor_results)
qvals <- qvalue::qvalue(cor_results$p.value)
cor_results$adj.pval <- qvals[["qvalues"]]
cor_results <- arrange(cor_results,p.value)
x <- broom::tidy(cor.test(midlife_HP_df_adj$avg_t2_total_hipp,midlife_HP_df_adj$loop_de_avg_degree)) %>% mutate(analysis = "Avg_DT_T2total" )
midlife_HP_correlations <- rbind(midlife_HP_correlations,x)
x
# Use hp data frame adjusted
ggscatter(midlife_HP_df_adj, x = "avg_t2_total_hipp", y = "loop_de_avg_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "pearson",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "degrees traveled  at average (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Use hp data frame adjusted
ggscatter(midlife_HP_df_adj, x = "avg_t2_total_hipp", y = "loop_de_rad3_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "spearman",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "degrees traveled at 3.0  (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Use hp data frame adjusted
ggscatter(midlife_HP_df_adj, x = "t2hipp_vol_avg_ca1", y = "loop_de_avg_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "pearson",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "degrees traveled  at average (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Use hp data frame adjusted
ggscatter(midlife_HP_df_adj, x = "t2hipp_vol_avg_ca1", y = "loop_de_rad3_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "spearman",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "degrees traveled  at average (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Use hp data frame adjusted
ggscatter(midlife_HP_df_adj, x = "t2hipp_vol_avg_ca23", y = "loop_de_avg_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "pearson",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "degrees traveled  at average (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Use hp data frame adjusted
ggscatter(midlife_HP_df_adj, x = "t2hipp_vol_avg_ca23", y = "loop_de_rad3_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "spearman",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "degrees traveled  at average (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Use hp data frame adjusted
ggscatter(midlife_HP_df_adj, x = "t2hipp_vol_avg_dg", y = "loop_de_avg_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "pearson",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "degrees traveled  at average (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Use hp data frame adjusted
ggscatter(midlife_HP_df_adj, x = "t2hipp_vol_avg_dg", y = "loop_de_rad3_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "spearman",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "degrees traveled  at average (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Use hp data frame adjusted
ggscatter(midlife_HP_df_adj, x = "t2hipp_vol_avg_sub", y = "loop_de_avg_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "pearson",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "degrees traveled  at average (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
x <- broom::tidy(cor.test(midlife_HP_df_adj$t2hipp_vol_avg_sub,midlife_HP_df_adj$loop_de_rad3_degree, method = "spearman")) %>% mutate(analysis = "rad3_DT_T2SUB" )  %>% mutate(parameter = "NA", conf.low= "NA", conf.high= "NA")
x <- x[,c(1,2,3,7,8,9,4,5,6)]
midlife_HP_correlations <- rbind(midlife_HP_correlations,x)
x
# Use hp data frame adjusted
ggscatter(midlife_HP_df_adj, x = "t2hipp_vol_avg_sub", y = "loop_de_rad3_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "spearman",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "degrees traveled  at average (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Use hp data frame adjusted
ggscatter(midlife_HP_df_adj, x = "t2hipp_vol_avg_erc", y = "loop_de_avg_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "pearson",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "degrees traveled  at average (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Use hp data frame adjusted
ggscatter(midlife_HP_df_adj, x = "t2hipp_vol_avg_phc", y = "loop_de_avg_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "pearson",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "degrees traveled  at average (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
x <- broom::tidy(cor.test(midlife_HP_df_adj$t2hipp_vol_avg_prc,midlife_HP_df_adj$loop_de_avg_degree)) %>% mutate(analysis = "Avg_DT_T2PRC" )
midlife_HP_correlations <- rbind(midlife_HP_correlations,x)
x
# Use hp data frame adjusted
ggscatter(midlife_HP_df_adj, x = "t2hipp_vol_avg_prc", y = "loop_de_avg_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "pearson",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "degrees traveled  at average (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Use hp data frame adjusted
ggscatter(midlife_HP_df_adj, x = "t2hipp_vol_avg_prc", y = "loop_de_rad3_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "spearman",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "degrees traveled  at average (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
ggscatter(midlife_HP_female_df_adj, x = "avg_t1_hipp", y = "fsh_spatial_miu_ml",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "spearman",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "FSH", ) +
theme(legend.position = "top", legend.title=element_blank())
ggscatter(midlife_HP_female_df_adj, x = "avg_t2_total_hipp", y = "fsh_spatial_miu_ml",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "spearman",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "FSH", ) +
theme(legend.position = "top", legend.title=element_blank())
ggscatter(midlife_HP_female_df_adj, x = "t2hipp_vol_avg_ca1", y = "progesterone_spatial_ng_ml",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "spearman",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "prog") +
theme(legend.position = "top", legend.title=element_blank())
ggscatter(midlife_HP_female_df_adj, x = "t2hipp_vol_avg_dg", y = "progesterone_spatial_ng_ml",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "spearman",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "prog") +
theme(legend.position = "top", legend.title=element_blank())
