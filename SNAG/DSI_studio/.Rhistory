geom_density()
ggplot(data=all_women_clean_df, aes(x=estradiol_scan_pg_ml)) +
geom_density()
ggplot(data=all_women_clean_df, aes(x=estradiol_spatial_pg_ml)) +
geom_density()
hormones_df <- all_women_clean_df %>% select(subject_id,estradiol_scan_pg_ml,estradiol_spatial_pg_ml,progesterone_scan_ng_ml,progesterone_spatial_ng_ml,fsh_scan_miu_ml,fsh_spatial_miu_ml)
hormones_df <- all_women_clean_df %>% select(subject_id,estradiol_scan_pg_ml,estradiol_spatial_pg_ml,progesterone_scan_ng_ml,progesterone_spatial_ng_ml,fsh_scan_miu_ml,fsh_spatial_miu_ml)
hormones_df <- all_women_clean_df %>% select("subject_id","estradiol_scan_pg_ml","estradiol_spatial_pg_ml","progesterone_scan_ng_ml","progesterone_spatial_ng_ml","fsh_scan_miu_ml","fsh_spatial_miu_ml")
hormones_df <- all_women_clean_df %>% select("subject_id","estradiol_scan_pg_ml","estradiol_spatial_pg_ml","progesterone_scan_ng_ml","progesterone_spatial_ng_ml","fsh_scan_miu_ml","fsh_spatial_miu_ml")
hormones_df <- all_women_clean_df %>% select(subject_id,estradiol_scan_pg_ml,estradiol_spatial_pg_ml,progesterone_scan_ng_ml,progesterone_spatial_ng_ml,fsh_scan_miu_ml,fsh_spatial_miu_ml)
hormones_df <- all_women_clean_df %>% select(c("subject_id","estradiol_scan_pg_ml","estradiol_spatial_pg_ml","progesterone_scan_ng_ml","progesterone_spatial_ng_ml","fsh_scan_miu_ml","fsh_spatial_miu_ml"))
hormones_df <- all_women_clean_df %>% select(c("subject_id","estradiol_scan_pg_ml","estradiol_spatial_pg_ml","progesterone_scan_ng_ml","progesterone_spatial_ng_ml","fsh_scan_miu_ml","fsh_spatial_miu_ml"))
hormones_df <- all_women_clean_df %>% dplyr::select(c("subject_id","estradiol_scan_pg_ml","estradiol_spatial_pg_ml","progesterone_scan_ng_ml","progesterone_spatial_ng_ml","fsh_scan_miu_ml","fsh_spatial_miu_ml"))
View(hormones_df)
ggplot(data=all_women_clean_df, aes(x=estradiol_scan_pg_ml)) +
geom_bar()
ggplot(data=all_women_clean_df, aes(x=estradiol_scan_pg_ml)) +
geom_density()
ggplot(data=all_women_clean_df, aes(x=estradiol_scan_pg_ml,y=subject_id)) +
geom_density()
ggplot(data=all_women_clean_df, aes(x=estradiol_scan_pg_ml,y=subject_id)) +
geom_bar()
ggplot(data=all_women_clean_df, aes(x=subject_id,y=estradiol_scan_pg_ml)) +
geom_bar()
ggplot(data=all_women_clean_df, aes(x=subject_id,y=estradiol_scan_pg_ml))
ggplot(data=all_women_clean_df, aes(x=estradiol_scan_pg_ml))
geom_density()
ggplot(data=all_women_clean_df, aes(x=estradiol_spatial_pg_ml)) +
geom_density()
ggplot(data=all_women_clean_df, aes(x=estradiol_scan_pg_ml))
geom_density()
hormones_df <- all_women_clean_df %>% dplyr::select(c("subject_id","estradiol_scan_pg_ml","estradiol_spatial_pg_ml","progesterone_scan_ng_ml","progesterone_spatial_ng_ml","fsh_scan_miu_ml","fsh_spatial_miu_ml"))
ggplot(data=all_women_clean_df, aes(x=estradiol_scan_pg_ml))
geom_density()
ggplot(data=all_women_clean_df, aes(x=estradiol_spatial_pg_ml)) +
geom_density()
ggplot(data=all_women_clean_df, aes(x=estradiol_scan_pg_ml)) +
geom_density()
ggplot(data=all_women_clean_df, aes(x=estradiol_spatial_pg_ml)) +
geom_density()
```{r}
model.2 <- lm(dsp_si_true_pct ~ fsh_scan_miu_ml, mediation_FSH_DF)
cor.test(fsh$fsh_scan_miu_ml,
fsh$dsp_si_true_pct,
conf.level = 0.95,
alternative = "less",
method = "spearman")
cor.test(f_data_dsp$estradiol_scan_pg_ml,
f_data_dsp$dsp_si_true_pct,
conf.level = 0.95,
alternative = "greater",
method = "spearman")
cor.test(f_data_dsp$estradiol_spatial_pg_ml,
f_data_dsp$dsp_si_true_pct,
conf.level = 0.95,
alternative = "greater",
method = "spearman")
pcor.test(f_data_dsp$estradiol_scan_pg_ml,
f_data_dsp$dsp_si_true_pct,
f_data_dsp$age_spatial_years,
method = "spearman")
pcor.test(f_data_dsp$estradiol_scan_pg_ml,
f_data_dsp$dsp_si_true_pct,
f_data_dsp$age_spatial_years,
method = "spearman")
pcor.test(f_data_dsp$estradiol_spatial_pg_ml,
f_data_dsp$dsp_si_true_pct,
f_data_dsp$age_spatial_years,
method = "spearman") #p-value=0.02876795
pcor.test(f_data_dsp$estradiol_scan_pg_ml,
f_data_dsp$dsp_si_true_pct,
f_data_dsp$age_spatial_years,
method = "spearman")
cor.test(f_data_dsp_outlier_e$estradiol_scan_pg_ml,
f_data_dsp_outlier_e$dsp_si_true_pct,
alternative = "greater",
conf.level = 0.95,
method = "spearman")
cor.test(f_data_dsp_outlier_e$estradiol_spatial_pg_ml,
f_data_dsp_outlier_e$dsp_si_true_pct,
alternative = "greater",
conf.level = 0.95,
method = "spearman")
cor.test(f_data_dsp_outlier_e$estradiol_scan_pg_ml,
f_data_dsp_outlier_e$dsp_si_true_pct,
alternative = "greater",
conf.level = 0.95,
method = "spearman")
model.1 <- lm(  dsp_si_true_pct ~  MD_Whole_Fornix , mediation_estradiol_DF)
summary(model.1)
model.2 <- lm(estradiol_spatial_pg_ml  ~ MD_Whole_Fornix, mediation_estradiol_DF)
summary(model.2)
model.1 <- lm(dsp_si_true_pct ~ MD_Whole_Fornix , mediation_FSH_DF)
mediation_estradiol_DF <- clean_DF %>% dplyr::select(subject_id,sex,age_spatial_years,repo_status,dsp_si_true_pct,estradiol_scan_pg_ml,estradiol_spatial_pg_ml, progesterone_scan_ng_ml,testosterone_scan_ng_dl,fsh_scan_miu_ml,QA_L_fornix,QA_R_fornix,MD_L_fornix,MD_R_fornix, MD_Whole_Fornix, QA_Whole_Fornix) %>% filter(!is.na(dsp_si_true_pct )) %>% filter(!is.na(estradiol_spatial_pg_ml)) %>% filter(sex== "Female")
mediation_test_DF <- clean_DF %>% dplyr::select(subject_id,sex,age_spatial_years,repo_status,dsp_si_true_pct,estradiol_scan_pg_ml,progesterone_scan_ng_ml,testosterone_scan_ng_dl,fsh_scan_miu_ml,QA_L_fornix,QA_R_fornix,MD_L_fornix,MD_R_fornix) %>% filter(!is.na(dsp_si_true_pct )) %>% filter(!is.na(testosterone_scan_ng_dl)) %>% filter(sex== "Female")
mediation_FSH_DF <- clean_DF %>% dplyr::select(subject_id,sex,age_spatial_years,repo_status,dsp_si_true_pct,estradiol_scan_pg_ml,progesterone_scan_ng_ml,testosterone_scan_ng_dl,fsh_scan_miu_ml,fsh_spatial_miu_ml,QA_L_fornix,QA_R_fornix,MD_L_fornix,MD_R_fornix,MD_Whole_Fornix, QA_Whole_Fornix) %>% filter(!is.na(dsp_si_true_pct )) %>% filter(!is.na(fsh_scan_miu_ml)) %>% filter(sex== "Female")
model.1 <- lm(dsp_si_true_pct ~ MD_Whole_Fornix , mediation_FSH_DF)
summary(model.1)
model.2 <- lm(dsp_si_true_pct ~ fsh_spatial_miu_ml, mediation_FSH_DF)
summary(model.2)
model.2 <- lm(fsh_spatial_miu_ml ~ MD_Whole_Fornix , mediation_FSH_DF)
summary(model.2)
model.2 <- lm(fsh_spatial_miu_ml ~ MD_Whole_Fornix , mediation_FSH_DF)
summary(model.2)
model.2 <- lm(estradiol_spatial_pg_ml  ~ dsp_si_true_pct, mediation_estradiol_DF)
summary(model.2)
model.2 <- lm(estradiol_spatial_pg_ml  ~ dsp_si_true_pct, mediation_estradiol_DF)
summary(model.2)
model.2 <- lm(dsp_si_true_pct  ~ estradiol_spatial_pg_ml, mediation_estradiol_DF)
summary(model.2)
model.2 <- lm(estradiol_spatial_pg_ml  ~ MD_Whole_Fornix , mediation_estradiol_DF)
summary(model.2)
model.2 <- lm(estradiol_spatial_pg_ml  ~ MD_Whole_Fornix , mediation_estradiol_DF)
summary(model.2)
model.2 <- lm(fsh_spatial_miu_ml ~ MD_Whole_Fornix , mediation_FSH_DF)
summary(model.2)
ggplot(sub_info, aes(x=SEX,y=maze_accuracy_pct, fill=factor(SEX))) +
geom_boxplot() +geom_point(size=4, color = "black") +    labs(x ="sex", y = "Maze Accuracy") + scale_fill_manual(values = c("#E2929D","#502E23"))
library(ggplot2)
#(plyr)
library(tidyverse)
# library(dplyr)
# library(tidyr)
library(stringr)
library(kableExtra)
# library(data.table)
# library(network)
# library(tidygraph)
# library(ggraph)
# library(igraph)
# library(networkD3)
# library(CINNA)
# library(umap)
# library(plotly)
#library(factoextra)
#library(lsr)
# library(car)
library(ggpubr)
#library(entropy)
#library(ds4psy)
# library(pROC)
#library(devtools)
#library(BRRR)
#library(stats)
#library(afex)
library(knitr)
library(janitor)
library(car)
library(ggiraph)
library(ggiraphExtra)
library(moonBook)
library(nationalparkcolors)
library(gridExtra)
library(markdown)
working_dir <-"/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/DSI/Maze/"
# PE_working_dir <- "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/My Drive/White matter tract/MidlifeWM_DSI2023/DSI/maze/Path_eff/"
rows2grab <- c("Tract Name", "number of tracts","mean length(mm)", "total volume(mm^3)")
sub_info <- read.csv(paste0(working_dir,"MazeDSI.csv"))
ReadingCSVFunc
install.packages("roxygen2")
ReadingCSVFunc <- function(pathname){
read.delim(paste0(working_dir, pathname), header=FALSE,sep = "\t")
#` README`
#Purpose of this code is to read in the CSVs that I extract from the correlational tractography from DSI studio. You simply need to include the path to the CSV from the working directory. We set our working dir above so you just need the rest of the path.
}
ReadingCSVFunc()
ReadingCSVFunc
ReadingCSVFunc <- function(pathname){
read.delim(paste0(working_dir, pathname), header=FALSE,sep = "\t")
#README
#Purpose: to read in the CSVs that I extract from the correlational tractography from DSI studio.
#Inputs: You simply need to include the path to the CSV from the working directory. We set our working dir above so you just need the rest of the path.
}
ReadingCSVFunc
ReadingCSVFunc <- function(pathname){
read.delim(paste0(working_dir, pathname), header=FALSE,sep = "\t")
#README
#Purpose: to read in the CSVs that I extract from the correlational tractography from DSI studio.
#Inputs: You simply need to include the path to the CSV from the working directory. We set our working dir above so you just need the rest of the path.
}
CleanInput <- function(DF){
DF <- DF %>%
remove_empty("cols") %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
`[`(-c(1),) %>%
as.data.frame()
return(DF)
}
Extract_raw_values <- function(DF,Metric) {
# Purpose of this function is to clean the data without me having to copy and paste everything later.
# Data = raw unclean dataframe we want to clean up
# Metric will be either MD or QA
# sex is either male or female
# Let's read in our data frame
# grab  ROIcolumn names
colNames <- DF  %>% remove_empty("cols") %>%
filter(V1 == "Tract Name") %>% t() %>% `[`(-1)
subinfo <- sub_info  %>% select(c("subject_id", "sex", "age_scan_years", "maze_accuracy_pct"))
# Let's grab our values
if (Metric == "MD"){
Values <- DF %>% remove_empty("cols") %>%
filter(str_detect(V1, c("mean_md"))) %>%
`colnames<-`(c("Subjects",colNames))
}
else{
Values <- DF %>%
remove_empty("cols") %>%
filter(str_detect(V1, c("mean_qa"))) %>%
`colnames<-`(c("Subjects",colNames)) %>% filter(!str_detect(Subjects, c("sub-369")))
}
# now let's put this together
ConvToNum <-  apply(Values[,2:length(Values)],2, as.numeric)
Values[,2:length(Values)] <- ConvToNum
cleanedDF <- cbind(subinfo,Values) %>% na.omit() %>% select(-c("Subjects"))
return (cleanedDF)
}
TableOutput <- function(df){
knitr::kable(df, row.names=F) %>%
kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>%
scroll_box(width = "800px", height = "300px")
}
CleanInput
ReadingCSVFunc <- function(pathname){
read.delim(paste0(working_dir, pathname), header=FALSE,sep = "\t")
#README
#Purpose: to read in the CSVs that I extract from the correlational tractography from DSI studio.
#Inputs: You simply need to include the path to the CSV from the working directory. We set our working dir above so you just need the rest of the path.
}
CleanInput <- function(DF){
#README
# The purpose of this function is to take the CSV that I extract from the correlational tractography and that has already been read into the script and made into a dataframe. It is then cleaned to create a clean output that grabs the following rows: "Tract Name", "number of tracts","mean length(mm)", "total volume(mm^3)"), and then re organizes the information for each subject into one dataframe. There's an if statement because some CSVs only have one significant tract and it needs a slightly different code to reorganize that.
#INPUT: Should take in a DF that was created when you read in the CSV from the correlational tract analysis. The output of the ReadingCSVFunc
DF <- DF %>%
remove_empty("cols") %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
`[`(-c(1),) %>%
as.data.frame()
return(DF)
}
Extract_raw_values <- function(DF,Metric) {
# Purpose of this function is to clean the data without me having to copy and paste everything later.
# Data = raw unclean dataframe we want to clean up
# Metric will be either MD or QA
# sex is either male or female
# Let's read in our data frame
# grab  ROIcolumn names
colNames <- DF  %>% remove_empty("cols") %>%
filter(V1 == "Tract Name") %>% t() %>% `[`(-1)
subinfo <- sub_info  %>% select(c("subject_id", "sex", "age_scan_years", "maze_accuracy_pct"))
# Let's grab our values
if (Metric == "MD"){
Values <- DF %>% remove_empty("cols") %>%
filter(str_detect(V1, c("mean_md"))) %>%
`colnames<-`(c("Subjects",colNames))
}
else{
Values <- DF %>%
remove_empty("cols") %>%
filter(str_detect(V1, c("mean_qa"))) %>%
`colnames<-`(c("Subjects",colNames)) %>% filter(!str_detect(Subjects, c("sub-369")))
}
# now let's put this together
ConvToNum <-  apply(Values[,2:length(Values)],2, as.numeric)
Values[,2:length(Values)] <- ConvToNum
cleanedDF <- cbind(subinfo,Values) %>% na.omit() %>% select(-c("Subjects"))
return (cleanedDF)
}
TableOutput <- function(df){
knitr::kable(df, row.names=F) %>%
kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>%
scroll_box(width = "800px", height = "300px")
}
CleanInput
CleanInput <- function(DF){
#README
# The purpose of this function is to take the CSV that I extract from the correlational tractography and that has already been read into the script and made into a dataframe. It is then cleaned to create a clean output that grabs the following rows: "Tract Name", "number of tracts","mean length(mm)", "total volume(mm^3)"), and then re organizes the information for each subject into one dataframe. There's an if statement because some CSVs only have one significant tract and it needs a slightly different code to reorganize that.
#INPUT: Should take in a DF that was created when you read in the CSV from the correlational tract analysis. The output of the ReadingCSVFunc
DF <- DF %>% remove_empty("cols")
if(length(DF) < 3){
DF <- DF %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
as.data.frame() %>%
`[`(-c(1),)
} else{
DF <- DF %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
`[`(-c(1),) %>%
as.data.frame()
}
return(DF)
}
CleanInput
library(ggplot2)
#(plyr)
library(tidyverse)
# library(dplyr)
# library(tidyr)
library(stringr)
library(kableExtra)
# library(data.table)
# library(network)
# library(tidygraph)
# library(ggraph)
# library(igraph)
# library(networkD3)
# library(CINNA)
# library(umap)
# library(plotly)
#library(factoextra)
#library(lsr)
# library(car)
library(ggpubr)
#library(entropy)
#library(ds4psy)
# library(pROC)
#library(devtools)
#library(BRRR)
#library(stats)
#library(afex)
library(knitr)
library(janitor)
library(car)
library(ggiraph)
library(ggiraphExtra)
library(moonBook)
library(nationalparkcolors)
library(gridExtra)
library(markdown)
working_dir <-"/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/DSI/Maze/"
# PE_working_dir <- "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/My Drive/White matter tract/MidlifeWM_DSI2023/DSI/maze/Path_eff/"
rows2grab <- c("Tract Name", "number of tracts","mean length(mm)", "total volume(mm^3)")
sub_info <- read.csv(paste0(working_dir,"MazeDSI.csv")) # this is a csv that contains all of the important subject information.
ReadingCSVFunc <- function(pathname){
#README
#Purpose of this code is to read in the CSVs that I extract from the correlational tractography from DSI studio. You simply need to include the path to the CSV from the working directory. We set our working dir above so you just need the rest of the path.
read.delim(paste0(working_dir, pathname), header=FALSE,sep = "\t")
}
CleanInput <- function(DF){
#README
# The purpose of this function is to take the CSV that I extract from the correlational tractography and that has already been read into the script and made into a dataframe. It is then cleaned to create a clean output that grabs the following rows: "Tract Name", "number of tracts","mean length(mm)", "total volume(mm^3)"), and then re organizes the information for each subject into one dataframe. There's an if statement because some CSVs only have one significant tract and it needs a slightly different code to reorganize that.
DF <- DF %>% remove_empty("cols")
if(length(DF) < 3){
DF <- DF %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
as.data.frame() %>%
`[`(-c(1),)
} else{
DF <- DF %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
`[`(-c(1),) %>%
as.data.frame()
}
return(DF)
}
TableOutput <- function(df){
#Purpose of this is to create a clean table that can be shown on the html. Most of this is aesthetics but it's a lot so i created a function to reduce the clutter later.
# The DF that is input is a clean data frame of the correlational tractography. At this point it has gone through the ReadingCSVFunc, and CleanInput
knitr::kable(df, row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = "600px", height = "300px")
}
# Extract_raw_values <- function(DF,Metric) {
#   # Purpose of this function is to clean the data without me having to copy and paste everything later. As well as extract
#
#   # Data = raw unclean dataframe we want to clean up
#   # Metric will be either MD or QA
#   # sex is either male or female
#
#
#   # Let's read in our data frame
#
#      colNames <- DF  %>% remove_empty("cols") %>%
#   filter(V1 == "Tract Name") %>% t() %>% `[`(-1)
#
#
#   # grab  ROIcolumn names
#
#
#   subinfo <- sub_info  %>% select(c("subject_id", "sex", "age_scan_years", "loop_pe_rad3_m", "loop_de_rad3_degree","REPO"))
#
#   # Let's grab our values
#   if (Metric == "MD"){
#     Values <- DF %>% remove_empty("cols") %>%
#      filter(str_detect(V1, c("mean_md"))) %>%
#    `colnames<-`(c("Subjects",colNames)) %>% filter(!str_detect(Subjects, c("sub-369")))
#   }
#   else{
#     Values <- DF %>%
#      remove_empty("cols") %>%
#       filter(str_detect(V1, c("mean_qa"))) %>%
#   `colnames<-`(c("Subjects",colNames)) %>% filter(!str_detect(Subjects, c("sub-369")))
#
#   }
#
#   # now let's put this together
#   if (length(Values) < 3) {
#     Values[,2] <- as.numeric(Values[,2])
#   }else{
#   ConvToNum <-  apply(Values[,2:length(Values)],2, as.numeric)
#   Values[,2:length(Values)] <- ConvToNum
#   }
#
#   cleanedDF <- cbind(subinfo,Values) %>% na.omit() %>% select(-c("Subjects"))
#
#   return (cleanedDF)
# }
# TableOutput <- function(df, style, width, height, caption){
#
#   if (style == "classic"){
#       knitr::kable(df, row.names=F) %>% kable_classic(full_width = F, html_font = "Cambria")
#   } else {
#       knitr::kable(df, row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = paste0(width,"px"), height = paste0(height,"px"))
#
#   }
#
# }
View(sub_info)
View(sub_info)
f <- sub_info %>% filter(SEX=0)
# Sex differences Ttest
f <- sub_info %>% filter(SEX==0)
SexTest <- t.test()
# Sex differences Ttest
female_subs <- sub_info %>% filter(SEX==0)
male_subs <- sub_info %>% filter(SEX==1)
SexTest <- t.test()
SexTest <- t.test(female_subs,male_subs)
SexTest <- t.test(female_subs$maze_accuracy_pct,male_subs$maze_accuracy_pct)
View(SexTest)
summarise(SexTest)
# Sex differences Ttest
female_subs <- sub_info %>% filter(SEX==0)
male_subs <- sub_info %>% filter(SEX==1)
SexTest <- t.test(female_subs$maze_accuracy_pct,male_subs$maze_accuracy_pct)
SexTest
# Sex differences Ttest
female_subs <- sub_info %>% filter(SEX==0)
male_subs <- sub_info %>% filter(SEX==1)
SexTest <- t.test(female_subs$maze_accuracy_pct,male_subs$maze_accuracy_pct)
# Sex differences Ttest
female_subs <- sub_info %>% filter(SEX==0)
male_subs <- sub_info %>% filter(SEX==1)
SexTest <- t.test(female_subs$maze_accuracy_pct,male_subs$maze_accuracy_pct,var.equal = TRUE)
SexTest
t.test(female_subs$maze_accuracy_pct,male_subs$maze_accuracy_pct,alternative = c("two.sided"))
shapiro.test(female_subs)
shapiro.test(female_subs$maze_accuracy_pct)
shapiro.test(male_subs$maze_accuracy_pct)
wilcox.test(female_subs$maze_accuracy_pct,male_subs$maze_accuracy_pct)
SexTest <- wilcox.test(female_subs$maze_accuracy_pct,male_subs$maze_accuracy_pct)
pre <- sub_info %>% filter(REPO==1)
peri <- sub_info %>% filter(REPO==2)
post <- sub_info %>% filter(REPO==3)
pre <- sub_info %>% filter(REPO==1) %>% select(maze_accuracy_pct)
peri <- sub_info %>% filter(REPO==2)%>% select(maze_accuracy_pct)
post <- sub_info %>% filter(REPO==3)%>% select(maze_accuracy_pct)
MenopauseTest <- kruskal.test(pre,peri,post)
pre <- sub_info %>% filter(REPO==1) %>% select(maze_accuracy_pct)
peri <- sub_info %>% filter(REPO==2)%>% select(maze_accuracy_pct)
post <- sub_info %>% filter(REPO==3)%>% select(maze_accuracy_pct)
# Menopause differences Ttest
pre <- sub_info %>% filter(REPO==1) %>% select(maze_accuracy_pct)
peri <- sub_info %>% filter(REPO==2)%>% select(maze_accuracy_pct)
post <- sub_info %>% filter(REPO==3)%>% select(maze_accuracy_pct)
MenopauseTest <- kruskal.test(list(pre,peri,post))
View(pre)
MenopauseTest <- kruskal.test(list(pre$maze_accuracy_pct,peri$maze_accuracy_pct,post$maze_accuracy_pct))
MenopauseTest
MenopauseTest <- aov(maze_accuracy_pct~REPO,sub_info)
MenopauseTest
View(MenopauseTest)
summary(MenopauseTest)
# Menopause differences Ttest
pre <- sub_info %>% filter(REPO==1) %>% select(maze_accuracy_pct)
peri <- sub_info %>% filter(REPO==2)%>% select(maze_accuracy_pct)
post <- sub_info %>% filter(REPO==3)%>% select(maze_accuracy_pct)
MenopauseTest <- aov(maze_accuracy_pct~REPO,sub_info)
summary(MenopauseTest)
#Siginifcant effect of REPO on performance
# Sex differences Ttest
female_subs <- sub_info %>% filter(SEX==0)
male_subs <- sub_info %>% filter(SEX==1)
shapiro.test(female_subs$maze_accuracy_pct) # not normal
shapiro.test(male_subs$maze_accuracy_pct) #Not normal
SexTest <- wilcox.test(female_subs$maze_accuracy_pct,male_subs$maze_accuracy_pct)
summary(SexTest)
SexTest <- wilcox.test(female_subs$maze_accuracy_pct,male_subs$maze_accuracy_pct)
t.test(female_subs$maze_accuracy_pct,male_subs$maze_accuracy_pct)
# Sex differences Ttest
female_subs <- sub_info %>% filter(SEX==0)
male_subs <- sub_info %>% filter(SEX==1)
shapiro.test(female_subs$maze_accuracy_pct) # not normal
shapiro.test(male_subs$maze_accuracy_pct) #Not normal
SexTest <- t.test(female_subs$maze_accuracy_pct,male_subs$maze_accuracy_pct)
summary(SexTest)
# Sex differences Ttest
female_subs <- sub_info %>% filter(SEX==0)
male_subs <- sub_info %>% filter(SEX==1)
shapiro.test(female_subs$maze_accuracy_pct) # not normal
shapiro.test(male_subs$maze_accuracy_pct) #Not normal
SexTest <- t.test(female_subs$maze_accuracy_pct,male_subs$maze_accuracy_pct)
SexTest
