cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "Angular Error at aver3.0  (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
#Creating an empty table to put everything in
normality_young_HP <- data.frame(matrix(ncol = 4, nrow = 0)) %>% `colnames<-`(c("statistic", "pvalue", "method", "variable"))
#LOOP: position error
normality_young_HP[1,] <- unlist(shapiro.test(young_HP_df$loop_pe_rad3_m)) #normal
normality_young_HP[2,] <- unlist(shapiro.test(young_HP_female_df$loop_pe_rad3_m)) #normal
normality_young_HP[3,] <- unlist(shapiro.test(young_HP_male_df$loop_pe_rad3_m)) #normal
#LOOP: position error average
normality_young_HP[4,] <-unlist(shapiro.test(young_HP_df$loop_pe_avg_m)) #normal
normality_young_HP[5,] <-unlist(shapiro.test(young_HP_female_df$loop_pe_avg_m)) #normal
normality_young_HP[6,] <-unlist(shapiro.test(young_HP_male_df$loop_pe_avg_m)) #normal
#LOOP: degrees traveled
normality_young_HP[7,] <-unlist(shapiro.test(young_HP_df$loop_de_rad3_degree))  #notnormal
normality_young_HP[8,] <-unlist(shapiro.test(young_HP_female_df$loop_de_rad3_degree))  #normal
normality_young_HP[9,] <-unlist(shapiro.test(young_HP_male_df$loop_de_rad3_degree) ) #notnormal
normality_young_HP[10,] <-unlist(shapiro.test(young_HP_df$loop_de_avg_degree))  #normal
normality_young_HP[11,] <-unlist(shapiro.test(young_HP_female_df$loop_de_avg_degree))  #normal
normality_young_HP[12,] <-unlist(shapiro.test(young_HP_male_df$loop_de_avg_degree))  #normal
#LOOP: angular error
normality_young_HP[13,] <-unlist(shapiro.test(young_HP_df$loop_ae_rad3_degree))  #normal
normality_young_HP[14,] <-unlist(shapiro.test(young_HP_female_df$loop_ae_rad3_degree))  #normal
normality_young_HP[15,] <-unlist(shapiro.test(young_HP_male_df$loop_ae_rad3_degree))  #normal
normality_young_HP[16,] <-unlist(shapiro.test(young_HP_df$loop_ae_avg_degree))  # notnormal
normality_young_HP[17,] <-unlist(shapiro.test(young_HP_female_df$loop_ae_avg_degree))  #notnormal
normality_young_HP[18,] <-unlist(shapiro.test(young_HP_male_df$loop_ae_avg_degree))  #no
View(normality_young_HP)
young_HP_correlations <- data.frame(matrix(ncol=9, nrow=0))
temp_yng_cor <- broom::tidy(cor.test(young_HP_df_adj$avg_t1_hipp,young_HP_df_adj$loop_pe_avg_m, method = "spearman")) %>% mutate(analysis = "Avg_PE_T1total" )  %>% mutate(parameter = "NA", conf.low= "NA", conf.high= "NA")
temp_yng_cor <- temp_yng_cor[,c(1,2,3,7,8,9,4,5,6)]
young_HP_correlations <- rbind(young_HP_correlations,temp_yng_cor)
temp_yng_cor
# Use hp data frame adjusted
ggscatter(young_HP_df_adj, x = "avg_t1_hipp", y = "loop_pe_avg_m",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "spearman",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "Position Error at average (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
temp_yng_cor <- broom::tidy(cor.test(young_HP_df_adj$avg_t1_hipp,young_HP_df_adj$loop_pe_rad3_m, method = "spearman")) %>% mutate(analysis = "rad3_PE_T1total" )  %>% mutate(parameter = "NA", conf.low= "NA", conf.high= "NA")
temp_yng_cor <- temp_yng_cor[,c(1,2,3,7,8,9,4,5,6)]
young_HP_correlations <- rbind(young_HP_correlations,temp_yng_cor)
temp_yng_cor
# Use hp data frame adjusted
ggscatter(young_HP_df_adj, x = "avg_t1_hipp", y = "loop_pe_rad3_m",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "spearman",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "Position Error at aver3.0  (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
View(young_HP_correlations)
temp_yng_cor <- broom::tidy(cor.test(young_HP_df_adj$avg_t1_hipp,young_HP_df_adj$loop_ae_avg_degree, method = "spearman")) %>% mutate(analysis = "Avg_AE_T1total" )  %>% mutate(parameter = "NA", conf.low= "NA", conf.high= "NA")
temp_yng_cor <- temp_yng_cor[,c(1,2,3,7,8,9,4,5,6)]
young_HP_correlations <- rbind(young_HP_correlations,temp_yng_cor)
temp_yng_cor
# Use hp data frame adjusted
ggscatter(young_HP_df_adj, x = "avg_t1_hipp", y = "loop_ae_avg_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "spearman",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "Angular Error at average (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
temp_yng_cor <- broom::tidy(cor.test(young_HP_df_adj$avg_t1_hipp,young_HP_df_adj$loop_ae_rad3_degree, method = "spearman")) %>% mutate(analysis = "rad3_AE_T1total" )  %>% mutate(parameter = "NA", conf.low= "NA", conf.high= "NA")
temp_yng_cor <- temp_yng_cor[,c(1,2,3,7,8,9,4,5,6)]
young_HP_correlations <- rbind(young_HP_correlations,temp_yng_cor)
temp_yng_cor
# Use hp data frame adjusted
ggscatter(young_HP_df_adj, x = "avg_t1_hipp", y = "loop_ae_rad3_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "spearman",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "Angular Error at aver3.0  (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Use hp data frame adjusted
ggscatter(young_HP_df_adj, x = "avg_t1_hipp", y = "loop_ae_rad3_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "spearman",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "Angular Error at aver3.0  (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
temp_yng_cor <- broom::tidy(cor.test(young_HP_df_adj$avg_t1_hipp,young_HP_df_adj$loop_de_avg_degree)) %>% mutate(analysis = "Avg_DT_T1total" )
young_HP_correlations <- rbind(young_HP_correlations,temp_yng_cor)
temp_yng_cor
View(young_HP_correlations)
# Use hp data frame adjusted
ggscatter(young_HP_df_adj, x = "avg_t1_hipp", y = "loop_de_avg_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "pearson",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "Degrees Traveled at average (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
temp_yng_cor <- broom::tidy(cor.test(young_HP_df_adj$avg_t1_hipp,young_HP_df_adj$loop_de_rad3_degree)) %>% mutate(analysis = "rad3_DT_T1total" )
young_HP_correlations <- rbind(young_HP_correlations,temp_yng_cor)
temp_yng_cor
# Use hp data frame adjusted
ggscatter(young_HP_df_adj, x = "avg_t1_hipp", y = "loop_de_rad3_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "pearson",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "Degrees Traveled at aver3.0  (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Use hp data frame adjusted
ggscatter(young_HP_df_adj, x = "Right-Hippocampus", y = "loop_pe_avg_m",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "spearman",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "Position Error at average (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Use hp data frame adjusted
ggscatter(young_HP_df_adj, x = "Right-Hippocampus", y = "loop_pe_rad3_m",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "spearman",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "Position Error at aver3.0  (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Use hp data frame adjusted
ggscatter(young_HP_df_adj, x = "Right-Hippocampus", y = "loop_ae_avg_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "spearman",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "Angular Error at average (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Use hp data frame adjusted
ggscatter(young_HP_df_adj, x = "Right-Hippocampus", y = "loop_ae_rad3_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "spearman",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "Angular Error at aver3.0  (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Use hp data frame adjusted
ggscatter(young_HP_df_adj, x = "Right-Hippocampus", y = "loop_de_avg_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "pearson",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "Degrees Traveled at average (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Use hp data frame adjusted
ggscatter(young_HP_df_adj, x = "Right-Hippocampus", y = "loop_de_rad3_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "pearson",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "Degrees Traveled at aver3.0  (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Use hp data frame adjusted
ggscatter(young_HP_df_adj, x = "Left-Hippocampus", y = "loop_pe_avg_m",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "spearman",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "Position Error at average (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Use hp data frame adjusted
ggscatter(young_HP_df_adj, x = "Left-Hippocampus", y = "loop_pe_rad3_m",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "spearman",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "Position Error at aver3.0  (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Use hp data frame adjusted
ggscatter(young_HP_df_adj, x = "Left-Hippocampus", y = "loop_ae_avg_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "spearman",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "Angular Error at average (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Use hp data frame adjusted
ggscatter(young_HP_df_adj, x = "Left-Hippocampus", y = "loop_ae_rad3_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "spearman",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "Angular Error at aver3.0  (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Use hp data frame adjusted
ggscatter(young_HP_df_adj, x = "Left-Hippocampus", y = "loop_de_avg_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "pearson",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "Degrees Traveled at average (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
# Use hp data frame adjusted
ggscatter(young_HP_df_adj, x = "Left-Hippocampus", y = "loop_de_rad3_degree",
add = "reg.line",
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
conf.int = TRUE,
cor.method = "pearson",
cor.coeff.args = list(label.sep = "\n"),
xlab = "Averaged GMV Volume", ylab = "Degrees Traveled at aver3.0  (m)", ) +
theme(legend.position = "top", legend.title=element_blank())
View(midlife_raw_df)
# now there's a lot of columns to select here so I'm going to try and make a few list of them so then we can grab by names
# precentral, postcentral, superoir parietal, superior frontal, caudate and putamen
lh_apriori <- c("lh_postcentral","lh_precentral","lh_superiorparietal","lh_superiorfrontal", "lh_cuneus","lh_medialorbitofrontal","lh_entorhinal","lh_parahippocampal","lh_precuneus","lh_lateraloccipital","lh_posteriorcingulate")
rh_apriori <- c("rh_postcentral","rh_precentral","rh_superiorparietal","rh_superiorfrontal", "rh_cuneus","rh_medialorbitofrontal","rh_entorhinal","rh_parahippocampal","rh_precuneus","rh_lateraloccipital","rh_posteriorcingulate")
sub_apriori <- c("Left.Caudate","Right.Caudate","Left.Putamen","Right.Putamen","Left.Hippocampus","Right.Hippocampus")
all_apriori <- c(lh_apriori,rh_apriori,sub_apriori)
# now there's a lot of columns to select here so I'm going to try and make a few list of them so then we can grab by names
# precentral, postcentral, superoir parietal, superior frontal, caudate and putamen
lh_apriori <- c("lh_postcentral","lh_precentral","lh_superiorparietal","lh_superiorfrontal", "lh_cuneus","lh_medialorbitofrontal","lh_entorhinal","lh_parahippocampal","lh_precuneus","lh_lateraloccipital","lh_posteriorcingulate")
rh_apriori <- c("rh_postcentral","rh_precentral","rh_superiorparietal","rh_superiorfrontal", "rh_cuneus","rh_medialorbitofrontal","rh_entorhinal","rh_parahippocampal","rh_precuneus","rh_lateraloccipital","rh_posteriorcingulate")
sub_apriori <- c("Left.Caudate","Right.Caudate","Left.Putamen","Right.Putamen","Left.Hippocampus","Right.Hippocampus")
all_apriori <- c(lh_apriori,rh_apriori,sub_apriori)
midlife_CT_df<- midlife_raw_df %>%  dplyr::select(
"subject_id",
"sex",
"age_spatial_years",
"repo_status",
"loop_pe_rad3_m",
"loop_pe_avg_m",
"loop_de_rad3_degree",
"loop_de_avg_degree",
"loop_ae_rad3_degree",
"loop_ae_avg_degree",
c(all_apriori))
library(ggplot2)
library(tidyverse)
library(stringr)
library(kableExtra)
# library(tidygraph)
# library(plotly)
#library(factoextra)
#library(lsr)
library(ggpubr)
library(knitr)
library(janitor)
library(car)
library(ggiraph)
library(ggiraphExtra)
library(moonBook)
library(gridExtra)
library(markdown)
library(psych)
library(ppcor)
# now there's a lot of columns to select here so I'm going to try and make a few list of them so then we can grab by names
# precentral, postcentral, superoir parietal, superior frontal, caudate and putamen
lh_apriori <- c("lh_postcentral","lh_precentral","lh_superiorparietal","lh_superiorfrontal", "lh_cuneus","lh_medialorbitofrontal","lh_entorhinal","lh_parahippocampal","lh_precuneus","lh_lateraloccipital","lh_posteriorcingulate")
rh_apriori <- c("rh_postcentral","rh_precentral","rh_superiorparietal","rh_superiorfrontal", "rh_cuneus","rh_medialorbitofrontal","rh_entorhinal","rh_parahippocampal","rh_precuneus","rh_lateraloccipital","rh_posteriorcingulate")
sub_apriori <- c("Left.Caudate","Right.Caudate","Left.Putamen","Right.Putamen","Left.Hippocampus","Right.Hippocampus")
all_apriori <- c(lh_apriori,rh_apriori,sub_apriori)
midlife_CT_df<- midlife_raw_df %>%  dplyr::select(
"subject_id",
"sex",
"age_spatial_years",
"repo_status",
"loop_pe_rad3_m",
"loop_pe_avg_m",
"loop_de_rad3_degree",
"loop_de_avg_degree",
"loop_ae_rad3_degree",
"loop_ae_avg_degree",
c(all_apriori))
midlife_CT_df<- midlife_raw_df %>%  dplyr::select(
"subject_id",
"sex",
"age_spatial_years",
"repo_status",
"loop_pe_rad3_m",
"loop_pe_avg_m",
"loop_de_rad3_degree",
"loop_de_avg_degree",
"loop_ae_rad3_degree",
"loop_ae_avg_degree",
all_apriori)
View(midlife_raw_df)
# now there's a lot of columns to select here so I'm going to try and make a few list of them so then we can grab by names
# precentral, postcentral, superoir parietal, superior frontal, caudate and putamen
lh_apriori <- c("lh_postcentral_thickness","lh_precentral_thickness","lh_superiorparietal_thickness","lh_superiorfrontal_thickness", "lh_cuneus_thickness","lh_medialorbitofrontal_thickness","lh_entorhinal_thickness","lh_parahippocampal_thickness","lh_precuneus_thickness","lh_lateraloccipital_thickness","lh_posteriorcingulate_thickness")
rh_apriori <- c("rh_postcentral_thickness","rh_precentral_thickness","rh_superiorparietal_thickness","rh_superiorfrontal_thickness", "rh_cuneus_thickness","rh_medialorbitofrontal_thickness","rh_entorhinal_thickness","rh_parahippocampal_thickness","rh_precuneus_thickness","rh_lateraloccipital_thickness","rh_posteriorcingulate_thickness")
sub_apriori <- c("Left.Caudate","Right.Caudate","Left.Putamen","Right.Putamen","Left.Hippocampus","Right.Hippocampus")
all_apriori <- c(lh_apriori,rh_apriori,sub_apriori)
midlife_CT_df<- midlife_raw_df %>%  dplyr::select(
"subject_id",
"sex",
"age_spatial_years",
"repo_status",
"loop_pe_rad3_m",
"loop_pe_avg_m",
"loop_de_rad3_degree",
"loop_de_avg_degree",
"loop_ae_rad3_degree",
"loop_ae_avg_degree",
all_apriori)
# now there's a lot of columns to select here so I'm going to try and make a few list of them so then we can grab by names
# precentral, postcentral, superoir parietal, superior frontal, caudate and putamen
lh_apriori <- c("lh_postcentral_thickness","lh_precentral_thickness","lh_superiorparietal_thickness","lh_superiorfrontal_thickness", "lh_cuneus_thickness","lh_medialorbitofrontal_thickness","lh_entorhinal_thickness","lh_parahippocampal_thickness","lh_precuneus_thickness","lh_lateraloccipital_thickness","lh_posteriorcingulate_thickness")
rh_apriori <- c("rh_postcentral_thickness","rh_precentral_thickness","rh_superiorparietal_thickness","rh_superiorfrontal_thickness", "rh_cuneus_thickness","rh_medialorbitofrontal_thickness","rh_entorhinal_thickness","rh_parahippocampal_thickness","rh_precuneus_thickness","rh_lateraloccipital_thickness","rh_posteriorcingulate_thickness")
sub_apriori <- c("Left-Caudate","Right-Caudate","Left-Putamen","Right-Putamen","Left-Hippocampus","Right-Hippocampus")
all_apriori <- c(lh_apriori,rh_apriori,sub_apriori)
midlife_CT_df<- midlife_raw_df %>%  dplyr::select(
"subject_id",
"sex",
"age_spatial_years",
"repo_status",
"loop_pe_rad3_m",
"loop_pe_avg_m",
"loop_de_rad3_degree",
"loop_de_avg_degree",
"loop_ae_rad3_degree",
"loop_ae_avg_degree",
all_apriori)
View(midlife_CT_df)
df <- midlife_CT_df %>% filter(loop_de_avg_degree != "NA")
midlife_CT_df_Avg <- midlife_CT_df %>% filter(loop_de_avg_degree != "NA")
cor_results <-
data.frame(matrix(nrow = 0, ncol = 7)) %>%   `colnames<-`(c("roi", "estimate", "p.value", "statistic", "n", "gp", "Method"))
# now there's a lot of columns to select here so I'm going to try and make a few list of them so then we can grab by names
# precentral, postcentral, superoir parietal, superior frontal, caudate and putamen
lh_apriori <- c("lh_postcentral_thickness","lh_precentral_thickness","lh_superiorparietal_thickness","lh_superiorfrontal_thickness", "lh_cuneus_thickness","lh_medialorbitofrontal_thickness","lh_entorhinal_thickness","lh_parahippocampal_thickness","lh_precuneus_thickness","lh_lateraloccipital_thickness","lh_posteriorcingulate_thickness")
rh_apriori <- c("rh_postcentral_thickness","rh_precentral_thickness","rh_superiorparietal_thickness","rh_superiorfrontal_thickness", "rh_cuneus_thickness","rh_medialorbitofrontal_thickness","rh_entorhinal_thickness","rh_parahippocampal_thickness","rh_precuneus_thickness","rh_lateraloccipital_thickness","rh_posteriorcingulate_thickness")
sub_apriori <- c("Left-Caudate","Right-Caudate","Left-Putamen","Right-Putamen","Left-Hippocampus","Right-Hippocampus")
all_apriori <- c(lh_apriori,rh_apriori,sub_apriori)
#creating dataframe with all apriori regions
midlife_CT_df<- midlife_raw_df %>%  dplyr::select(
"subject_id",
"sex",
"age_spatial_years",
"repo_status",
"loop_pe_rad3_m",
"loop_pe_avg_m",
"loop_de_rad3_degree",
"loop_de_avg_degree",
"loop_ae_rad3_degree",
"loop_ae_avg_degree",
"EstimatedTotalIntraCranialVol"
all_apriori)
#creating dataframe with all apriori regions
midlife_CT_df<- midlife_raw_df %>%  dplyr::select(
"subject_id",
"sex",
"age_spatial_years",
"repo_status",
"loop_pe_rad3_m",
"loop_pe_avg_m",
"loop_de_rad3_degree",
"loop_de_avg_degree",
"loop_ae_rad3_degree",
"loop_ae_avg_degree",
"EstimatedTotalIntraCranialVol",
all_apriori)
# now there's a lot of columns to select here so I'm going to try and make a few list of them so then we can grab by names
# precentral, postcentral, superoir parietal, superior frontal, caudate and putamen
lh_apriori <- c("lh_postcentral_thickness","lh_precentral_thickness","lh_superiorparietal_thickness","lh_superiorfrontal_thickness", "lh_cuneus_thickness","lh_medialorbitofrontal_thickness","lh_entorhinal_thickness","lh_parahippocampal_thickness","lh_precuneus_thickness","lh_lateraloccipital_thickness","lh_posteriorcingulate_thickness")
rh_apriori <- c("rh_postcentral_thickness","rh_precentral_thickness","rh_superiorparietal_thickness","rh_superiorfrontal_thickness", "rh_cuneus_thickness","rh_medialorbitofrontal_thickness","rh_entorhinal_thickness","rh_parahippocampal_thickness","rh_precuneus_thickness","rh_lateraloccipital_thickness","rh_posteriorcingulate_thickness")
sub_apriori <- c("Left-Caudate","Right-Caudate","Left-Putamen","Right-Putamen","Left-Hippocampus","Right-Hippocampus")
all_apriori <- c(lh_apriori,rh_apriori,sub_apriori)
#creating dataframe with all apriori regions
midlife_CT_df <- midlife_raw_df %>%  dplyr::select(
"subject_id",
"sex",
"age_spatial_years",
"repo_status",
"loop_pe_rad3_m",
"loop_pe_avg_m",
"loop_de_rad3_degree",
"loop_de_avg_degree",
"loop_ae_rad3_degree",
"loop_ae_avg_degree",
"EstimatedTotalIntraCranialVol",
all_apriori
) %>% mutate(
avg_t1_hipp = (.$`Left-Hippocampus` + .$`Right-Hippocampus`) / 2,
avg_postcentral = lh_postcentral_thickness + rh_postcentral_thickness /
2,
avg_precentral = lh_precentral_thickness + rh_precentral_thickness / 2,
avg_superior_parietal = lh_superiorparietal_thickness + rh_superiorparietal_thickness / 2,
avg_superior_frontal = rh_superiorfrontal_thickness + lh_superiorfrontal_thickness / 2 , avg_caudate = `Left-Caudate` + `Right-Caudate` /2, avg_putamen = `Left-Putamen`,`Right-Putamen`
)
View(midlife_CT_df)
# now there's a lot of columns to select here so I'm going to try and make a few list of them so then we can grab by names
# precentral, postcentral, superoir parietal, superior frontal, caudate and putamen
lh_apriori <- c("lh_postcentral_thickness","lh_precentral_thickness","lh_superiorparietal_thickness","lh_superiorfrontal_thickness", "lh_cuneus_thickness","lh_medialorbitofrontal_thickness","lh_entorhinal_thickness","lh_parahippocampal_thickness","lh_precuneus_thickness","lh_lateraloccipital_thickness","lh_posteriorcingulate_thickness")
rh_apriori <- c("rh_postcentral_thickness","rh_precentral_thickness","rh_superiorparietal_thickness","rh_superiorfrontal_thickness", "rh_cuneus_thickness","rh_medialorbitofrontal_thickness","rh_entorhinal_thickness","rh_parahippocampal_thickness","rh_precuneus_thickness","rh_lateraloccipital_thickness","rh_posteriorcingulate_thickness")
sub_apriori <- c("Left-Caudate","Right-Caudate","Left-Putamen","Right-Putamen","Left-Hippocampus","Right-Hippocampus")
all_apriori <- c(lh_apriori,rh_apriori,sub_apriori)
#creating dataframe with all apriori regions
midlife_CT_df <- midlife_raw_df %>%  dplyr::select(
"subject_id",
"sex",
"age_spatial_years",
"repo_status",
"loop_pe_rad3_m",
"loop_pe_avg_m",
"loop_de_rad3_degree",
"loop_de_avg_degree",
"loop_ae_rad3_degree",
"loop_ae_avg_degree",
"EstimatedTotalIntraCranialVol",
all_apriori
) %>% mutate(
avg_t1_hipp = (.$`Left-Hippocampus` + .$`Right-Hippocampus`) / 2,
avg_postcentral = lh_postcentral_thickness + rh_postcentral_thickness /
2,
avg_precentral = lh_precentral_thickness + rh_precentral_thickness / 2,
avg_superior_parietal = lh_superiorparietal_thickness + rh_superiorparietal_thickness / 2,
avg_superior_frontal = rh_superiorfrontal_thickness + lh_superiorfrontal_thickness / 2 , avg_caudate = `Left-Caudate` + `Right-Caudate` /2, avg_putamen = `Left-Putamen`,`Right-Putamen`
) filter(EstimatedTotalIntraCranialVol != "NA")
#creating dataframe with all apriori regions
midlife_CT_df <- midlife_raw_df %>%  dplyr::select(
"subject_id",
"sex",
"age_spatial_years",
"repo_status",
"loop_pe_rad3_m",
"loop_pe_avg_m",
"loop_de_rad3_degree",
"loop_de_avg_degree",
"loop_ae_rad3_degree",
"loop_ae_avg_degree",
"EstimatedTotalIntraCranialVol",
all_apriori
) %>% mutate(
avg_t1_hipp = (.$`Left-Hippocampus` + .$`Right-Hippocampus`) / 2,
avg_postcentral = lh_postcentral_thickness + rh_postcentral_thickness /
2,
avg_precentral = lh_precentral_thickness + rh_precentral_thickness / 2,
avg_superior_parietal = lh_superiorparietal_thickness + rh_superiorparietal_thickness / 2,
avg_superior_frontal = rh_superiorfrontal_thickness + lh_superiorfrontal_thickness / 2 , avg_caudate = `Left-Caudate` + `Right-Caudate` /2, avg_putamen = `Left-Putamen`,`Right-Putamen`
) %>% filter(EstimatedTotalIntraCranialVol != "NA")
View(midlife_CT_df)
avg_apriori <- c(avg_t1_hipp,avg_postcentral, avg_precentral,
avg_superior_parietal, avg_superior_frontal, avg_caudate, avg_putamen)
avg_apriori <- c("avg_t1_hipp","avg_postcentral", "avg_precentral",
"avg_superior_parietal", "avg_superior_frontal", "avg_caudate", "avg_putamen")
midlife_CT_df_Avg <- midlife_CT_df %>% filter(loop_de_avg_degree != "NA")
cor_results <-
data.frame(matrix(nrow = 0, ncol = 7)) %>%   `colnames<-`(c("roi", "estimate", "p.value", "statistic", "n", "gp", "Method"))
pcorlist <- list()
for (ROI in avg_apriori) {
print(ROI)
if(!is.na(sum(midlife_CT_df_Avg[[ROI]])) == FALSE){
pcorlist[[ROI]] <- NA
}else{
pcorlist[[ROI]] <-
pcor.test(x = midlife_CT_df_Avg[["loop_de_avg_degree"]], y = midlife_CT_df_Avg[[ROI]], z = midlife_CT_df_Avg[, c("age_spatial_years","sex","EstimatedTotalIntraCranialVol")])
temp <- cbind(ROI, pcorlist[[ROI]])
cor_results <- rbind(cor_results, temp)
}
}
cor_results$adj.pval <- p.adjust(cor_results$p.value, method = "BY", n = length(cor_results$p.value))
cor_results <- arrange(cor_results,p.value)
sum(midlife_CT_df_Avg[[ROI]])
pcor.test(x = midlife_CT_df_Avg[["loop_de_avg_degree"]], y = midlife_CT_df_Avg[[ROI]], z = midlife_CT_df_Avg[, c("age_spatial_years","sex","EstimatedTotalIntraCranialVol")])
class(midlife_CT_df_Avg[["loop_de_avg_degree"]])
midlife_CT_df_Avg[["loop_de_avg_degree"]]''
midlife_CT_df_Avg[["loop_de_avg_degree"]]
class(midlife_CT_df_Avg[[ROI]])
pcorlist[[ROI]] <-
pcor.test(x = midlife_CT_df_Avg[["loop_de_avg_degree"]], y = midlife_CT_df_Avg[[ROI]], z = midlife_CT_df_Avg[, c("age_spatial_years","sex","EstimatedTotalIntraCranialVol")])
pcorlist[[ROI]] <-
pcor.test(x = midlife_CT_df_Avg$loop_de_avg_degree, y = midlife_CT_df_Avg[[ROI]], z = midlife_CT_df_Avg[, c("age_spatial_years","sex","EstimatedTotalIntraCranialVol")])
pcorlist[[ROI]] <-
pcor.test(x = midlife_CT_df_Avg$loop_de_avg_degree, y = midlife_CT_df_Avg[[ROI]], z = midlife_CT_df_Avg[, c("age_spatial_years","sex","EstimatedTotalIntraCranialVol")])
midlife_CT_df_Avg[["loop_de_avg_degree"]] <- as.numeric(midlife_CT_df_Avg[["loop_de_avg_degree"]])
pcorlist[[ROI]] <-
pcor.test(x = midlife_CT_df_Avg[["loop_de_avg_degree"]], y = midlife_CT_df_Avg[[ROI]], z = midlife_CT_df_Avg[, c("age_spatial_years","sex","EstimatedTotalIntraCranialVol")])
midlife_CT_df_Avg[[ROI]]
class(midlife_CT_df_Avg[[ROI]])
pcor.test(x = midlife_CT_df_Avg$loop_de_avg_degree, y = midlife_CT_df_Avg$avg_postcentral, z = midlife_CT_df_Avg[, c("age_spatial_years","sex","EstimatedTotalIntraCranialVol")])
